# Cursor Rules for Sprite Project

> **Purpose**
> Keep Cursor AI focused and consistent when generating code or content for the **Sprite** indie‑SaaS. Treat this as the single source of truth for tech‑stack boundaries and coding style.

---

## 1. Tech Stack (Lock‑In)

| Layer                     | Choice                                     | Notes                                                                                                 |
| ------------------------- | ------------------------------------------ | ----------------------------------------------------------------------------------------------------- |
| **Frontend Framework**    | **Next.js 14 App Router**                  | Use `/app` directory, React 18, server components where possible.                                     |
| **Styling**               | **Tailwind CSS 3.4 + DaisyUI 4**           | No other CSS frameworks. Leverage utility classes; keep custom CSS minimal.                           |
| **State / Data‑Fetching** | React hooks + built‑in Next.js fetch cache | Avoid Redux/Zustand unless justified.                                                                 |
| **Auth**                  | **Supabase Auth (v2)**                     | Magic link + Google OAuth only. Use `@supabase/auth-helpers-nextjs` + `@supabase/auth-helpers-react`. |
| **Database**              | Supabase Postgres (hosted)                 | No MongoDB. Keep schema in `supabase/migrations`.                                                     |
| **Payments**              | **Stripe** (Checkout + Customer Portal)    | Monthly \$99 and Annual \$1,000 prices only.                                                          |
| **Email**                 | Resend + Nodemailer fallback               | For magic‑link resend + transactional.                                                                |
| **Hosting**               | Vercel                                     | Continuous deployment from `main`.                                                                    |
| **CI/Lint**               | ESLint + Prettier (Next preset)            | No custom Airbnb rules.                                                                               |

---

## 2. Repository Conventions

1. **Branching**: feature branches -> PR -> `main`. No commits directly to `main`.
2. **Env Vars**: All sensitive keys live in `.env.local`, never committed.
3. **Directory shortcuts**:
   - `src/components/` for shared UI.
   - `src/libs/` for third‑party wrappers (e.g. `stripe.js`, `supabase.js`).
4. **Imports**: Use absolute imports via `@/` alias.

---

## 3. Coding Style Constraints

- **TypeScript Opt‑In**: Only add `.ts`/`.tsx` when strict types help (e.g. API wrappers). Otherwise keep JS.
- **File Naming**: kebab‑case for files, PascalCase for React components.
- **Server Components**: Default to server; switch to `"use client"` only when hooks/events are required.
- **No Class Components**, no jQuery, no Moment.js.

---

## 4. Stripe Rules

- Prices hard‑coded in `config.js` (`priceId`, `price`, `priceAnchor`).
- Use **mode="subscription"** for both plans.
- Webhook route `/api/stripe/webhook` updates `profiles.subscription_status`.

---

## 5. Supabase Rules

- Public Supabase client in `libs/supabase/client.js`.
- SSR helpers in `libs/supabase/server.js`.
- `profiles` table owns: `id`, `email`, `customer_id`, `subscription_status`.

---

## 6. UI/UX Guidelines

- Hero image: `/public/images/sprite-logo.png` (replace when live demo video ready).
- Primary color = `#6366F1` (Tailwind `indigo-500`).
- Buttons: `btn btn-primary` for CTAs, `btn-outline` for secondary.
- Responsive at `sm`, `md`, `lg` breakpoints only.

---

## 7. Prohibited

- Do **not** introduce NextAuth, MongoDB, Firebase, or Redux.
- No CSS‑in‑JS libs (Styled‑Components, Emotion).
- No SCSS/Sass.
- No class‑based React components.

---

Keep this file up to date whenever the stack decision changes.

Also please keep security in mind and build with the intention of protecting my site from common hacks.
